/**
 * Razer REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ChromaSdkInput_author.h"

namespace ChromaPackage {
namespace Model {

ChromaSdkInput_author::ChromaSdkInput_author()
{
    m_Name = U("");
    m_NameIsSet = false;
    m_Contact = U("");
    m_ContactIsSet = false;
    
}

ChromaSdkInput_author::~ChromaSdkInput_author()
{
}

void ChromaSdkInput_author::validate()
{
    // TODO: implement validation
}

web::json::value ChromaSdkInput_author::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_ContactIsSet)
    {
        val[U("contact")] = ModelBase::toJson(m_Contact);
    }
    

    return val;
}

void ChromaSdkInput_author::fromJson(web::json::value& val)
{
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    if(val.has_field(U("contact")))
    {
        setContact(ModelBase::stringFromJson(val[U("contact")]));
        
    }
    
}

void ChromaSdkInput_author::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_ContactIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("contact"), m_Contact));
        
    }
    
}

void ChromaSdkInput_author::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    if(multipart->hasContent(U("contact")))
    {
        setContact(ModelBase::stringFromHttpContent(multipart->getContent(U("contact"))));
        
    }
    
}


utility::string_t ChromaSdkInput_author::getName() const
{
    return m_Name;
}
void ChromaSdkInput_author::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool ChromaSdkInput_author::nameIsSet() const
{
    return m_NameIsSet;
}
void ChromaSdkInput_author::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t ChromaSdkInput_author::getContact() const
{
    return m_Contact;
}
void ChromaSdkInput_author::setContact(utility::string_t value)
{
    m_Contact = value;
    m_ContactIsSet = true;
}
bool ChromaSdkInput_author::contactIsSet() const
{
    return m_ContactIsSet;
}
void ChromaSdkInput_author::unsetContact()
{
    m_ContactIsSet = false;
}

}
}

