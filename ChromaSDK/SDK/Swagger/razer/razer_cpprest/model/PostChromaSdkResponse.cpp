/**
 * Razer REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PostChromaSdkResponse.h"

namespace ChromaPackage {
namespace Model {

PostChromaSdkResponse::PostChromaSdkResponse()
{
    m_Sessionid = U("");
    m_SessionidIsSet = false;
    m_Uri = U("");
    m_UriIsSet = false;
    
}

PostChromaSdkResponse::~PostChromaSdkResponse()
{
}

void PostChromaSdkResponse::validate()
{
    // TODO: implement validation
}

web::json::value PostChromaSdkResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SessionidIsSet)
    {
        val[U("sessionid")] = ModelBase::toJson(m_Sessionid);
    }
    if(m_UriIsSet)
    {
        val[U("uri")] = ModelBase::toJson(m_Uri);
    }
    

    return val;
}

void PostChromaSdkResponse::fromJson(web::json::value& val)
{
    if(val.has_field(U("sessionid")))
    {
        setSessionid(ModelBase::stringFromJson(val[U("sessionid")]));
        
    }
    if(val.has_field(U("uri")))
    {
        setUri(ModelBase::stringFromJson(val[U("uri")]));
        
    }
    
}

void PostChromaSdkResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_SessionidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sessionid"), m_Sessionid));
        
    }
    if(m_UriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("uri"), m_Uri));
        
    }
    
}

void PostChromaSdkResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("sessionid")))
    {
        setSessionid(ModelBase::stringFromHttpContent(multipart->getContent(U("sessionid"))));
        
    }
    if(multipart->hasContent(U("uri")))
    {
        setUri(ModelBase::stringFromHttpContent(multipart->getContent(U("uri"))));
        
    }
    
}


utility::string_t PostChromaSdkResponse::getSessionid() const
{
    return m_Sessionid;
}
void PostChromaSdkResponse::setSessionid(utility::string_t value)
{
    m_Sessionid = value;
    m_SessionidIsSet = true;
}
bool PostChromaSdkResponse::sessionidIsSet() const
{
    return m_SessionidIsSet;
}
void PostChromaSdkResponse::unsetSessionid()
{
    m_SessionidIsSet = false;
}
utility::string_t PostChromaSdkResponse::getUri() const
{
    return m_Uri;
}
void PostChromaSdkResponse::setUri(utility::string_t value)
{
    m_Uri = value;
    m_UriIsSet = true;
}
bool PostChromaSdkResponse::uriIsSet() const
{
    return m_UriIsSet;
}
void PostChromaSdkResponse::unsetUri()
{
    m_UriIsSet = false;
}

}
}

