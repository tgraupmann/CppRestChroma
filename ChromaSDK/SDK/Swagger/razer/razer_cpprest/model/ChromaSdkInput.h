/**
 * Razer REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ChromaSdkInput.h
 *
 * JSON Data
 */

#ifndef ChromaSdkInput_H_
#define ChromaSdkInput_H_


#include "ModelBase.h"

#include "ChromaSdkInput_author.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace ChromaPackage {
namespace Model {

/// <summary>
/// JSON Data
/// </summary>
class  ChromaSdkInput
    : public ModelBase
{
public:
    ChromaSdkInput();
    virtual ~ChromaSdkInput();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ChromaSdkInput members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTitle() const;
    void setTitle(utility::string_t value);
    bool titleIsSet() const;
    void unsetTitle();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ChromaSdkInput_author> getAuthor() const;
    void setAuthor(std::shared_ptr<ChromaSdkInput_author> value);
    bool authorIsSet() const;
    void unsetAuthor();
    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getDeviceSupported();
    bool device_supportedIsSet() const;
    void unsetDevice_supported();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCategory() const;
    void setCategory(utility::string_t value);
    bool categoryIsSet() const;
    void unsetCategory();

protected:
    utility::string_t m_Title;
    bool m_TitleIsSet;
utility::string_t m_Description;
    bool m_DescriptionIsSet;
std::shared_ptr<ChromaSdkInput_author> m_Author;
    bool m_AuthorIsSet;
std::vector<utility::string_t> m_Device_supported;
    bool m_Device_supportedIsSet;
utility::string_t m_Category;
    bool m_CategoryIsSet;
};

}
}

#endif /* ChromaSdkInput_H_ */
