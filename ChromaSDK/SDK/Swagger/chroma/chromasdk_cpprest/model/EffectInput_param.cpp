/**
 * Chroma Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "EffectInput_param.h"

namespace ChromaPackage {
namespace Model {

EffectInput_param::EffectInput_param()
{
    m_Color = 0;
    m_ColorIsSet = false;
    m_Color1 = 0;
    m_Color1IsSet = false;
    m_Color2 = 0;
    m_Color2IsSet = false;
    m_Direction = 0;
    m_DirectionIsSet = false;
    m_Duration = 0;
    m_DurationIsSet = false;
    m_Type = 0;
    m_TypeIsSet = false;
    
}

EffectInput_param::~EffectInput_param()
{
}

void EffectInput_param::validate()
{
    // TODO: implement validation
}

web::json::value EffectInput_param::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ColorIsSet)
    {
        val[U("color")] = ModelBase::toJson(m_Color);
    }
    if(m_Color1IsSet)
    {
        val[U("color1")] = ModelBase::toJson(m_Color1);
    }
    if(m_Color2IsSet)
    {
        val[U("color2")] = ModelBase::toJson(m_Color2);
    }
    if(m_DirectionIsSet)
    {
        val[U("direction")] = ModelBase::toJson(m_Direction);
    }
    if(m_DurationIsSet)
    {
        val[U("duration")] = ModelBase::toJson(m_Duration);
    }
    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }
    

    return val;
}

void EffectInput_param::fromJson(web::json::value& val)
{
    if(val.has_field(U("color")))
    {
        setColor(ModelBase::int32_tFromJson(val[U("color")]));
    }
    if(val.has_field(U("color1")))
    {
        setColor1(ModelBase::int32_tFromJson(val[U("color1")]));
    }
    if(val.has_field(U("color2")))
    {
        setColor2(ModelBase::int32_tFromJson(val[U("color2")]));
    }
    if(val.has_field(U("direction")))
    {
        setDirection(ModelBase::int32_tFromJson(val[U("direction")]));
    }
    if(val.has_field(U("duration")))
    {
        setDuration(ModelBase::int32_tFromJson(val[U("duration")]));
    }
    if(val.has_field(U("type")))
    {
        setType(ModelBase::int32_tFromJson(val[U("type")]));
    }
    
}

void EffectInput_param::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("color"), m_Color));
    }
    if(m_Color1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("color1"), m_Color1));
    }
    if(m_Color2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("color2"), m_Color2));
    }
    if(m_DirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("direction"), m_Direction));
    }
    if(m_DurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("duration"), m_Duration));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    }
    
}

void EffectInput_param::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("color")))
    {
        setColor(ModelBase::int32_tFromHttpContent(multipart->getContent(U("color"))));
    }
    if(multipart->hasContent(U("color1")))
    {
        setColor1(ModelBase::int32_tFromHttpContent(multipart->getContent(U("color1"))));
    }
    if(multipart->hasContent(U("color2")))
    {
        setColor2(ModelBase::int32_tFromHttpContent(multipart->getContent(U("color2"))));
    }
    if(multipart->hasContent(U("direction")))
    {
        setDirection(ModelBase::int32_tFromHttpContent(multipart->getContent(U("direction"))));
    }
    if(multipart->hasContent(U("duration")))
    {
        setDuration(ModelBase::int32_tFromHttpContent(multipart->getContent(U("duration"))));
    }
    if(multipart->hasContent(U("type")))
    {
        setType(ModelBase::int32_tFromHttpContent(multipart->getContent(U("type"))));
    }
    
}


int32_t EffectInput_param::getColor() const
{
    return m_Color;
}
void EffectInput_param::setColor(int32_t value)
{
    m_Color = value;
    m_ColorIsSet = true;
}
bool EffectInput_param::colorIsSet() const
{
    return m_ColorIsSet;
}
void EffectInput_param::unsetColor()
{
    m_ColorIsSet = false;
}
int32_t EffectInput_param::getColor1() const
{
    return m_Color1;
}
void EffectInput_param::setColor1(int32_t value)
{
    m_Color1 = value;
    m_Color1IsSet = true;
}
bool EffectInput_param::color1IsSet() const
{
    return m_Color1IsSet;
}
void EffectInput_param::unsetColor1()
{
    m_Color1IsSet = false;
}
int32_t EffectInput_param::getColor2() const
{
    return m_Color2;
}
void EffectInput_param::setColor2(int32_t value)
{
    m_Color2 = value;
    m_Color2IsSet = true;
}
bool EffectInput_param::color2IsSet() const
{
    return m_Color2IsSet;
}
void EffectInput_param::unsetColor2()
{
    m_Color2IsSet = false;
}
int32_t EffectInput_param::getDirection() const
{
    return m_Direction;
}
void EffectInput_param::setDirection(int32_t value)
{
    m_Direction = value;
    m_DirectionIsSet = true;
}
bool EffectInput_param::directionIsSet() const
{
    return m_DirectionIsSet;
}
void EffectInput_param::unsetDirection()
{
    m_DirectionIsSet = false;
}
int32_t EffectInput_param::getDuration() const
{
    return m_Duration;
}
void EffectInput_param::setDuration(int32_t value)
{
    m_Duration = value;
    m_DurationIsSet = true;
}
bool EffectInput_param::durationIsSet() const
{
    return m_DurationIsSet;
}
void EffectInput_param::unsetDuration()
{
    m_DurationIsSet = false;
}
int32_t EffectInput_param::getType() const
{
    return m_Type;
}
void EffectInput_param::setType(int32_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool EffectInput_param::typeIsSet() const
{
    return m_TypeIsSet;
}
void EffectInput_param::unsetType()
{
    m_TypeIsSet = false;
}

}
}

