/**
 * Chroma Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "EffectInput.h"

namespace ChromaPackage {
namespace Model {

EffectInput::EffectInput()
{
    m_ParamIsSet = false;
    
}

EffectInput::~EffectInput()
{
}

void EffectInput::validate()
{
    // TODO: implement validation
}

web::json::value EffectInput::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("effect")] = ModelBase::toJson(m_Effect);
    if(m_ParamIsSet)
    {
        val[U("param")] = ModelBase::toJson(m_Param);
    }
    

    return val;
}

void EffectInput::fromJson(web::json::value& val)
{
    std::shared_ptr<EffectType> newEffect(new EffectType());
    newEffect->fromJson(val[U("effect")]);
    setEffect( newItem );
    if(val.has_field(U("param")))
    {
        if(!val[U("param")].is_null())
        {
            std::shared_ptr<EffectInput_param> newItem(new EffectInput_param());
            newItem->fromJson(val[U("param")]);
            setParam( newItem );
        }
        
    }
    
}

void EffectInput::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    m_Effect->toMultipart(multipart, U("effect."));
    if(m_ParamIsSet)
    {
        if (m_Param.get())
        {
            m_Param->toMultipart(multipart, U("param."));
        }
        
    }
    
}

void EffectInput::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    std::shared_ptr<EffectType> newEffect(new EffectType());
    newEffect->fromMultiPart(multipart, U("effect."));
    setEffect( newEffect );
    if(multipart->hasContent(U("param")))
    {
        if(multipart->hasContent(U("param")))
        {
            std::shared_ptr<EffectInput_param> newItem(new EffectInput_param());
            newItem->fromMultiPart(multipart, U("param."));
            setParam( newItem );
        }
        
    }
    
}


std::shared_ptr<EffectType> EffectInput::getEffect() const
{
    return m_Effect;
}
void EffectInput::setEffect(std::shared_ptr<EffectType> value)
{
    m_Effect = value;
    
}
std::shared_ptr<EffectInput_param> EffectInput::getParam() const
{
    return m_Param;
}
void EffectInput::setParam(std::shared_ptr<EffectInput_param> value)
{
    m_Param = value;
    m_ParamIsSet = true;
}
bool EffectInput::paramIsSet() const
{
    return m_ParamIsSet;
}
void EffectInput::unsetParam()
{
    m_ParamIsSet = false;
}

}
}

