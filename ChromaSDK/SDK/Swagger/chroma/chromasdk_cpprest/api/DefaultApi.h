/**
 * Chroma Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DefaultApi.h
 *
 * 
 */

#ifndef DefaultApi_H_
#define DefaultApi_H_


#include "ApiClient.h"

#include "DeleteChromaSdkResponse.h"
#include "EffectArray1dInput.h"
#include "EffectArray2dInput.h"
#include "EffectIdentifierInput.h"
#include "EffectIdentifierResponse.h"
#include "EffectInput.h"
#include "EffectResponse.h"
#include "EffectResponseId.h"

namespace ChromaPackage {

using namespace ChromaPackage::Model;

class  DefaultApi
{
public:
    DefaultApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~DefaultApi();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete the Chroma SDK session
    /// </remarks>
    
    pplx::task<std::shared_ptr<DeleteChromaSdkResponse>> deleteChromaSdk();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To turn off effect use CHROMA_NONE.
    /// </remarks>
    
    pplx::task<void> heartbeat();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// POST will return an effect id. To turn off effect use CHROMA_NONE.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postChromaLink(std::shared_ptr<EffectInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 1D array with 5 elements. POST will return an effect id.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postChromaLinkCustom(std::shared_ptr<EffectArray1dInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Turn off effect. POST will return an effect id.
    /// </remarks>
    
    pplx::task<std::shared_ptr<EffectResponseId>> postChromaLinkNone();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To set static color. POST will return an effect id.
    /// </remarks>
    /// <param name="color">Color value in BGR format</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postChromaLinkStatic(int32_t color);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// POST will return an effect id. To turn off effect use CHROMA_NONE.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postHeadset(std::shared_ptr<EffectInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 1D array with 5 elements. POST will return an effect id.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postHeadsetCustom(std::shared_ptr<EffectArray1dInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Turn off effect. POST will return an effect id.
    /// </remarks>
    
    pplx::task<std::shared_ptr<EffectResponseId>> postHeadsetNone();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To set static color. POST will return an effect id.
    /// </remarks>
    /// <param name="color">Color value in BGR format</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postHeadsetStatic(int32_t color);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// POST will return an effect id. To turn off effect use CHROMA_NONE.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postKeyboard(std::shared_ptr<EffectInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 2D array with 6 rows of 22 columns. POST will return an effect id.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postKeyboardCustom(std::shared_ptr<EffectArray2dInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Turn off effect. POST will return an effect id.
    /// </remarks>
    
    pplx::task<std::shared_ptr<EffectResponseId>> postKeyboardNone();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To set static color. POST will return an effect id.
    /// </remarks>
    /// <param name="color">Color value in BGR format</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postKeyboardStatic(int32_t color);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// POST will return an effect id. To turn off effect use CHROMA_NONE.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postKeypad(std::shared_ptr<EffectInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 1D array with 4 rows of 5 columns. POST will return an effect id.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postKeypadCustom(std::shared_ptr<EffectArray2dInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Turn off effect. POST will return an effect id.
    /// </remarks>
    
    pplx::task<std::shared_ptr<EffectResponseId>> postKeypadNone();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To set static color. POST will return an effect id.
    /// </remarks>
    /// <param name="color">Color value in BGR format</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postKeypadStatic(int32_t color);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// POST will return an effect id. To turn off effect use CHROMA_NONE.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postMouse(std::shared_ptr<EffectInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 2D array with 9 rows of 7 columns. POST will return an effect id.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postMouseCustom(std::shared_ptr<EffectArray2dInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Turn off effect. POST will return an effect id.
    /// </remarks>
    
    pplx::task<std::shared_ptr<EffectResponseId>> postMouseNone();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To set static color. POST will return an effect id.
    /// </remarks>
    /// <param name="color">Color value in BGR format</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postMouseStatic(int32_t color);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// POST will return an effect id. To turn off effect use CHROMA_NONE.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postMousepad(std::shared_ptr<EffectInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 1D array with 15 elements. POST will return an effect id.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postMousepadCustom(std::shared_ptr<EffectArray1dInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Turn off effect. POST will return an effect id.
    /// </remarks>
    
    pplx::task<std::shared_ptr<EffectResponseId>> postMousepadNone();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To set static color. POST will return an effect id.
    /// </remarks>
    /// <param name="color">Color value in BGR format</param>
    pplx::task<std::shared_ptr<EffectResponseId>> postMousepadStatic(int32_t color);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To turn off effect use CHROMA_NONE.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponse>> putChromaLink(std::shared_ptr<EffectInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 1D array with 5 elements.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponse>> putChromaLinkCustom(std::shared_ptr<EffectArray1dInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Turn off effect
    /// </remarks>
    
    pplx::task<std::shared_ptr<EffectResponse>> putChromaLinkNone();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To set static color.
    /// </remarks>
    /// <param name="color">Color value in BGR format</param>
    pplx::task<std::shared_ptr<EffectResponse>> putChromaLinkStatic(int32_t color);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Setting effect with an identifier or set of identifiers.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectIdentifierResponse>> putEffect(std::shared_ptr<EffectIdentifierInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To turn off effect use CHROMA_NONE.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponse>> putHeadset(std::shared_ptr<EffectInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 1D array with 5 elements.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponse>> putHeadsetCustom(std::shared_ptr<EffectArray1dInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Turn off effect
    /// </remarks>
    
    pplx::task<std::shared_ptr<EffectResponse>> putHeadsetNone();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To set static color.
    /// </remarks>
    /// <param name="color">Color value in BGR format</param>
    pplx::task<std::shared_ptr<EffectResponse>> putHeadsetStatic(int32_t color);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To turn off effect use CHROMA_NONE.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponse>> putKeyboard(std::shared_ptr<EffectInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 2D array with 6 rows of 22 columns.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponse>> putKeyboardCustom(std::shared_ptr<EffectArray2dInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Turn off effect
    /// </remarks>
    
    pplx::task<std::shared_ptr<EffectResponse>> putKeyboardNone();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To set static color.
    /// </remarks>
    /// <param name="color">Color value in BGR format</param>
    pplx::task<std::shared_ptr<EffectResponse>> putKeyboardStatic(int32_t color);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To turn off effect use CHROMA_NONE.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponse>> putKeypad(std::shared_ptr<EffectInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 2D array with 4 rows of 5 columns.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponse>> putKeypadCustom(std::shared_ptr<EffectArray2dInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Turn off effect
    /// </remarks>
    
    pplx::task<std::shared_ptr<EffectResponse>> putKeypadNone();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To set static color.
    /// </remarks>
    /// <param name="color">Color value in BGR format</param>
    pplx::task<std::shared_ptr<EffectResponse>> putKeypadStatic(int32_t color);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To turn off effect use CHROMA_NONE.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponse>> putMouse(std::shared_ptr<EffectInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 2D array with 9 rows of 7 columns.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponse>> putMouseCustom(std::shared_ptr<EffectArray2dInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Turn off effect
    /// </remarks>
    
    pplx::task<std::shared_ptr<EffectResponse>> putMouseNone();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To set static color.
    /// </remarks>
    /// <param name="color">Color value in BGR format</param>
    pplx::task<std::shared_ptr<EffectResponse>> putMouseStatic(int32_t color);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To turn off effect use CHROMA_NONE.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponse>> putMousepad(std::shared_ptr<EffectInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 1D array with 15 elements.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectResponse>> putMousepadCustom(std::shared_ptr<EffectArray1dInput> data);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Turn off effect
    /// </remarks>
    
    pplx::task<std::shared_ptr<EffectResponse>> putMousepadNone();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// To set static color.
    /// </remarks>
    /// <param name="color">Color value in BGR format</param>
    pplx::task<std::shared_ptr<EffectResponse>> putMousepadStatic(int32_t color);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Remove an effect or a set of effects with identifier. Effects must be removed to free resources.
    /// </remarks>
    /// <param name="data"> (optional)</param>
    pplx::task<std::shared_ptr<EffectIdentifierResponse>> removeEffect(std::shared_ptr<EffectIdentifierInput> data);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}

#endif /* DefaultApi_H_ */

